[{"C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\reportWebVitals.js":"1","C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\reducers\\rootReducer.js":"2","C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\ARdiagram\\shapes\\StackFrame.js":"3","C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\ARdiagram\\shapes\\shapeComponents\\ARHalfFrame.js":"4","C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\ARdiagram\\shapes\\ObjectFrame.js":"5","C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\ARdiagram\\ARArrayDrop.js":"6","C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\ARdiagram\\ARArray.js":"7","C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\ARdiagram\\ARArrayElement.js":"8","C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\index.jsx":"9","C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\store.js":"10","C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\App.jsx":"11","C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\GeneralDiagrams\\Arrow\\arrowSlice.js":"12","C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\components\\codeDoodle\\CodeDoodle.jsx":"13","C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\components\\CodePanel.jsx":"14","C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\components\\UploadButton.jsx":"15","C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\components\\Toggalable.jsx":"16","C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\components\\DownloadButton.jsx":"17","C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\components\\Droppable.jsx":"18","C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\components\\anchor\\Anchor.jsx":"19","C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\ARdiagram\\ARDiagramDrawArea.jsx":"20","C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\components\\CodeEditor.jsx":"21","C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\ARdiagram\\ARHeapArea.jsx":"22","C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\ARdiagram\\ARStaticArea.jsx":"23","C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\ARdiagram\\ARStackArea.jsx":"24","C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\components\\DrawingIcons.jsx":"25","C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\components\\DragAndDropFiles.jsx":"26","C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\components\\LineNum.jsx":"27","C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\components\\Pointer.jsx":"28","C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\components\\ClassPopupArea.jsx":"29","C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\GeneralDiagrams\\EditableText.jsx":"30","C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\components\\PointerPopupArea.jsx":"31","C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\components\\Variable.jsx":"32","C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\components\\Class.jsx":"33","C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\GeneralDiagrams\\Arrow\\Arrow.jsx":"34","C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\GeneralDiagrams\\SmallMenu.jsx":"35","C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\components\\codeDoodle\\stackSlice.js":"36","C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\components\\DroppableFunction.jsx":"37","C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\ARdiagram\\shapes\\StackFrameFunction.js":"38"},{"size":375,"mtime":1611795984030,"results":"39","hashOfConfig":"40"},{"size":769,"mtime":1612985786105,"results":"41","hashOfConfig":"40"},{"size":3315,"mtime":1613542164063,"results":"42","hashOfConfig":"40"},{"size":6069,"mtime":1613537740693,"results":"43","hashOfConfig":"40"},{"size":1738,"mtime":1613454544015,"results":"44","hashOfConfig":"40"},{"size":1847,"mtime":1613532718085,"results":"45","hashOfConfig":"40"},{"size":3740,"mtime":1613532105590,"results":"46","hashOfConfig":"40"},{"size":775,"mtime":1613454544014,"results":"47","hashOfConfig":"40"},{"size":635,"mtime":1613451165147,"results":"48","hashOfConfig":"40"},{"size":301,"mtime":1613533996971,"results":"49","hashOfConfig":"40"},{"size":168,"mtime":1613451165135,"results":"50","hashOfConfig":"40"},{"size":1905,"mtime":1613451165136,"results":"51","hashOfConfig":"40"},{"size":10615,"mtime":1613536597671,"results":"52","hashOfConfig":"40"},{"size":5498,"mtime":1613451165139,"results":"53","hashOfConfig":"40"},{"size":1528,"mtime":1613451165144,"results":"54","hashOfConfig":"40"},{"size":670,"mtime":1613451165143,"results":"55","hashOfConfig":"40"},{"size":1207,"mtime":1613451165140,"results":"56","hashOfConfig":"40"},{"size":6082,"mtime":1613540793065,"results":"57","hashOfConfig":"40"},{"size":1527,"mtime":1613451165145,"results":"58","hashOfConfig":"40"},{"size":14182,"mtime":1613540208967,"results":"59","hashOfConfig":"40"},{"size":4410,"mtime":1613451165139,"results":"60","hashOfConfig":"40"},{"size":416,"mtime":1613451165134,"results":"61","hashOfConfig":"40"},{"size":422,"mtime":1613451165135,"results":"62","hashOfConfig":"40"},{"size":4417,"mtime":1613542438565,"results":"63","hashOfConfig":"40"},{"size":2748,"mtime":1613451165141,"results":"64","hashOfConfig":"40"},{"size":1548,"mtime":1613451165140,"results":"65","hashOfConfig":"40"},{"size":1260,"mtime":1613451165142,"results":"66","hashOfConfig":"40"},{"size":1691,"mtime":1613451165142,"results":"67","hashOfConfig":"40"},{"size":3905,"mtime":1613451165139,"results":"68","hashOfConfig":"40"},{"size":2367,"mtime":1613451165137,"results":"69","hashOfConfig":"40"},{"size":893,"mtime":1613451165142,"results":"70","hashOfConfig":"40"},{"size":3809,"mtime":1613451165144,"results":"71","hashOfConfig":"40"},{"size":8069,"mtime":1613451165138,"results":"72","hashOfConfig":"40"},{"size":1633,"mtime":1613451165136,"results":"73","hashOfConfig":"40"},{"size":1999,"mtime":1613451165138,"results":"74","hashOfConfig":"40"},{"size":2794,"mtime":1613543114953,"results":"75","hashOfConfig":"40"},{"size":6114,"mtime":1613542068540,"results":"76","hashOfConfig":"40"},{"size":3183,"mtime":1613540229846,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"p74rf1",{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"80"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"80"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"80"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"130","messages":"131","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"80"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"80"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"80"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"80"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"80"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\reportWebVitals.js",[],["163","164"],"C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\reducers\\rootReducer.js",[],"C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\ARdiagram\\shapes\\StackFrame.js",["165"],"C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\ARdiagram\\shapes\\shapeComponents\\ARHalfFrame.js",["166"],"C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\ARdiagram\\shapes\\ObjectFrame.js",["167"],"import React from 'react';\r\nimport './ObjectFrame.css'\r\nimport '../../GeneralDiagrams/HandDrawnBoxes.css'\r\nimport EditableText from '../../GeneralDiagrams/EditableText'\r\nimport Variable from '../../components/Variable';\r\nimport ARHalfFrame from './shapeComponents/ARHalfFrame'\r\nimport Droppable from '../../components/Droppable';\r\n\r\nconst DroppableHalfFrame = Droppable(ARHalfFrame)\r\n\r\n/*  \r\n  ObjectFrame component makes up a ObjectFrame on the application, creates a local and argument half-frame\r\n  Manages no state\r\n\r\n  Receives props:\r\n   - id: a unique identifier of this ObjectFrame\r\n   - name: the name of this ObjectFrame\r\n   - local: the local variables of this ObjectFrame\r\n   - args: the arguments of this ObjectFrame\r\n   - onNameChange: access to ARStackAreas onNameChange function\r\n   - onLocalChange: access to ARStackAreas onLocalChange functionv\r\n   - onArgsChange: access to ARStackAreas onArgsChange function\r\n*/\r\nexport default class ObjectFrame extends React.Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <EditableText\r\n          onChange={this.props.onNameChange}\r\n          value={this.props.name}\r\n          editClassName=\"classCreatorName\"\r\n        />\r\n\r\n        <div className=\"objectBox handDrawnBox3\">\r\n          <div className=\"inner3\">\r\n            <div ref={this.halfFrame} className=\"objectInnerDroppableArea\">\r\n              <DroppableHalfFrame\r\n                name=\"\"\r\n                value={this.props.value}\r\n                classes={this.props.classes}\r\n                handleDrop={this.props.handleDrop}\r\n                handleChange={this.props.handleChange}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}","C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\ARdiagram\\ARArrayDrop.js",[],"C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\ARdiagram\\ARArray.js",["168","169","170"],"import React, { Component } from \"react\"\r\nimport './ARArray.css'\r\nimport ARArrayElement from \"./ARArrayElement\"\r\n\r\nconst ARArray = (props) => {\r\n\r\n    const addElement = () => {\r\n        let value = props.value\r\n        let newElement = [...value.element, {elementID: Math.floor(Math.random() * 1000), elementValue: \" \" }]\r\n        value.element = newElement;  \r\n        props.onChange(value)\r\n    }\r\n\r\n    const  removeElement =(id) => { // Need to do double array traversal... mighe be slow?\r\n        let value = props.value\r\n        value.array.forEach((singleArray, index, arrays) => {arrays[index] = arrays[index].filter(element => element.elementID !== id);})//foreach takes three arguments, the element, index, and the array itself\r\n        console.log(value)\r\n        props.onChange(value)\r\n        value.array.forEach((singleArray, index, arrays) => {if(singleArray.length === 0){arrays = arrays.splice(index, 1);}})//If empty remove the array it self\r\n        //TODO: Remove array if all elements are removed from it, need parent to do this\r\n    }\r\n\r\n    const changeElementValue = (id, elementValue) => { // Need to do double array traversal... might be slow? Not too many elements for it to be slow\r\n        let value = props.value\r\n        value.array.forEach(array => {\r\n            array.forEach(element =>{\r\n                if (element.elementID === id) {\r\n                    element.elementValue = elementValue\r\n                }\r\n            })\r\n        })\r\n        props.onChange(value)\r\n        \r\n    }\r\n\r\n    const handleDrop = (text, value) => { //Reminder child's handleDrop does not have access to the this pointer\r\n        console.log('ARArray handleDrop props');\r\n        console.log(value)\r\n        \r\n\r\n        if (text === 'array'){\r\n            let newArray = [...value.array, [ {\r\n                elementID: Math.floor(Math.random() * 1000),\r\n                elementValue: \" \"\r\n            }]]\r\n            value.array = newArray\r\n            return text // Return here as we don't need to send prompt for array index\r\n        } \r\n        \r\n        let index = 0\r\n        if (value.array.length >= 2){\r\n            index = window.prompt(\"Which array would you like to enter the element?\") // TODO: Add error checking\r\n        }\r\n      \r\n        if (text === \"int\"){ //TODO: instead check if text equals type we have, if so add, else don't add, add type checking into Element\r\n            console.log(\"Dropping int\")\r\n            console.log(value.array[index])\r\n            let newArray = [...value.array[index], {elementID: Math.floor(Math.random() * 1000), elementValue: \" \" }]\r\n            value.array[index] = newArray;            \r\n        } else if (text === 'double'){\r\n            console.log(\"Dropping double\")\r\n        } \r\n        return value // Returns to parent of droppable\r\n        \r\n    }\r\n\r\n    return (\r\n        <div className=\"array\">\r\n            {props.value.array.map((singleArray) => ( //Map only works with arrays, you can nest maps\r\n                <div className=\"mainArray\" key = {Math.floor(Math.random() * 1000)}>\r\n                    {singleArray.map((element) => (<ARArrayElement key={element.elementID}\r\n                                                        id = {element.elementID}\r\n                                                        name = {element.elementValue}\r\n                                                        removeElement = {removeElement}\r\n                                                        changeElement={changeElementValue}\r\n                                                        className=\"element\"                \r\n                    />))}\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n    \r\n\r\n}\r\n\r\n\r\n\r\nexport default ARArray","C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\ARdiagram\\ARArrayElement.js",[],"C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\index.jsx",[],"C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\store.js",[],"C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\App.jsx",[],"C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\GeneralDiagrams\\Arrow\\arrowSlice.js",[],"C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\components\\codeDoodle\\CodeDoodle.jsx",["171","172","173","174","175","176","177","178"],"C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\components\\CodePanel.jsx",[],"C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\components\\UploadButton.jsx",[],"C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\components\\Toggalable.jsx",[],"C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\components\\DownloadButton.jsx",[],"C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\components\\Droppable.jsx",[],"C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\components\\anchor\\Anchor.jsx",["179"],"import React, {useState, useEffect} from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport ReactDOM from 'react-dom'\r\nimport Draggable from 'react-draggable';\r\nimport './Anchor.css'\r\nimport {\r\n    reRender as reRenderArrows,\r\n} from '../../GeneralDiagrams/Arrow/arrowSlice'\r\n\r\n/*\r\n// uses xArrow, but renders this element in another root div called arrow-root, this is in public/index.html after root\r\n// uses portals to render it there, this was to make it not get overlapped by other elements (zIndex doesn't solve this easily with react)\r\n// (inflexibility of library xArrow v1)\r\n\r\n// also has event listener to change state of the arrow upon resizing of the window, this is simply to force the arrow to re-rener\r\n// so it shows up in the proper place \r\n*/\r\n\r\nconst arrowRoot = document.getElementById('arrow-root')\r\n\r\nconst Anchor = (props) => {\r\n    const dispatch = useDispatch()\r\n    const el = document.createElement('div')\r\n\r\n    useEffect(() => {\r\n        arrowRoot.appendChild(el)\r\n\r\n        return function cleanup() {\r\n            arrowRoot.removeChild(el)\r\n        }\r\n    })\r\n\r\n    const handleDrag = () => {\r\n        console.log('dragging anchor')\r\n        \r\n        dispatch(reRenderArrows())\r\n    }\r\n\r\n    return ReactDOM.createPortal(\r\n        <Draggable \r\n            {...props} \r\n            defaultPosition={{x: 700, y: -300}} \r\n            className=\"anchor\" \r\n            onStop={handleDrag} \r\n        >\r\n            {props.children}\r\n        </Draggable>,el\r\n    )\r\n\r\n}\r\n\r\nexport default Anchor","C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\ARdiagram\\ARDiagramDrawArea.jsx",["180","181"],"C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\components\\CodeEditor.jsx",[],"C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\ARdiagram\\ARHeapArea.jsx",[],"C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\ARdiagram\\ARStaticArea.jsx",[],"C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\ARdiagram\\ARStackArea.jsx",["182","183"],"C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\components\\DrawingIcons.jsx",["184","185","186"],"import React, { Component } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux' \r\nimport './DrawingIcons.css';\r\nimport ClassPopupArea from \"./ClassPopupArea\"\r\nimport Pointer from \"./Pointer\"\r\n/* \r\n    Component makes up the drawing tools part of the application\r\n    To add more items to the panel add to <ul> in this format:\r\n        \r\n        <li id='your_icon_name' draggable={true} onDragStart={this.handleDrag}>your_icon_name</li>\r\n    \r\n    Manages no State, recieves prop showButton, showButton is for class creator popup, what should not \r\n    be shown when class creator renders this menu ('new class' button, anchor button, and stackframe)\r\n*/\r\nconst DrawingIcons = (props) =>  {\r\n    const anchors = useSelector(state => state.anchors)\r\n    const dispatch = useDispatch()\r\n    /* \r\n        sets 'Text' to be equal to the targets id (i.e. if int is dragged, int will be loaded into 'Text'), will be retrieved in StackFrame.js\r\n    */\r\n    const handleDrag = (e) => {\r\n        e.dataTransfer.setData('Text', e.target.id);\r\n    }\r\n\r\n    const dispatchNewAnchor = () => {\r\n        dispatch({type: 'new_anchor', payload:{divID:'anchor-2', initialPosition:{x:400,y:-300}}})\r\n    }\r\n\r\n    return (\r\n        <div className='drawing-icons'>\r\n            <ul>\r\n                {props.showButton ?\r\n                <li id='stack' draggable={true} onDragStart={handleDrag}>Stack Frame</li>:<React.Fragment/>}\r\n\r\n                <li id='int' draggable={true} onDragStart={handleDrag}>Int</li>\r\n                <li id='double' draggable={true} onDragStart={handleDrag}>Double</li>\r\n                <li id='boolean' draggable={true} onDragStart={handleDrag}>Boolean</li>\r\n                <li id='char' draggable={true} onDragStart={handleDrag}>Char</li>\r\n                <li id='array' draggable={true} onDragStart={handleDrag}>Array</li>\r\n\r\n                <li><h4>Classes</h4></li>\r\n                {props.classList.map((item, index) =>\r\n                    <li key={index} id={item.name} draggable={true} onDragStart={handleDrag}>{item.name}</li>\r\n                )}\r\n\r\n                {props.showButton ?\r\n                    <React.Fragment>\r\n                        <ClassPopupArea\r\n                            classList={props.classList}\r\n                            onClassListChange={props.onClassListChange}\r\n                            showButton={props.showButton}\r\n                        /> \r\n                    \r\n                        <li><h4>General</h4></li>\r\n                        <li id='anchor' onClick={dispatchNewAnchor}><button>Anchor</button></li>\r\n\r\n                    </React.Fragment>: <React.Fragment />}\r\n                \r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DrawingIcons;","C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\components\\DragAndDropFiles.jsx",[],"C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\components\\LineNum.jsx",[],"C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\components\\Pointer.jsx",[],"C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\components\\ClassPopupArea.jsx",[],"C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\GeneralDiagrams\\EditableText.jsx",["187","188"],"import React from 'react'\r\n\r\nexport default class EditableText extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            name: props.name,\r\n            type: props.type || 'text',\r\n            value: props.value || '',\r\n            editClassName: props.editClassName,\r\n            edit: false\r\n        }\r\n\r\n        this.getWidth = this.getWidth.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    edit = () => {\r\n        this.setState(() => ({\r\n            edit: this.state.edit !== false\r\n        }))\r\n    }\r\n\r\n    getWidth() {\r\n\r\n        var width = this.state.value.length;\r\n        width = width * 8;\r\n        var css = {\r\n            width: width\r\n        }\r\n\r\n        return css;\r\n    }\r\n\r\n    handleChange(event) {\r\n        var new_value = event.target.value;\r\n        this.props.onChange(new_value);\r\n        this.setState({ value: new_value });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            this.state.edit === true &&\r\n            <input\r\n                style={this.getWidth()}\r\n                maxLength=\"30\"\r\n                name={this.state.name}\r\n                type={this.state.type}\r\n                value={this.state.value}\r\n                className={this.state.editClassName}\r\n                autoFocus\r\n                onFocus={event => {\r\n                    const value = event.target.value\r\n                    event.target.value = ''\r\n                    event.target.value = value\r\n                    this.setState({ backup: this.state.value })\r\n                }}\r\n                onChange={this.handleChange}\r\n                onBlur={event=>{\r\n                this.setState({edit:false})\r\n                }}\r\n                onKeyDown={event => {\r\n                    if (event.key === 'Enter') {\r\n                        this.setState({ edit: false })\r\n                    }\r\n                }}\r\n                onKeyUp={event => {\r\n                    if (event.key === 'Escape') {\r\n                        this.setState({ edit: false, value: this.state.backup })\r\n                    }\r\n                }}\r\n            />\r\n            ||\r\n            <span onClick={event => {\r\n                this.setState({ edit: this.state.edit !== true })\r\n            }}>\r\n                {this.state.value}\r\n            </span>\r\n        )\r\n    }\r\n}","C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\components\\PointerPopupArea.jsx",[],"C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\components\\Variable.jsx",[],"C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\components\\Class.jsx",["189"],"import React from 'react';\r\nimport Variable from './Variable';\r\nimport EditableText from '../GeneralDiagrams/EditableText';\r\nimport './Class.css';\r\nimport Droppable from './Droppable';\r\nimport Toggalable from  './Toggalable'\r\nimport Arrow from \"../GeneralDiagrams/Arrow/Arrow\"\r\nimport ClickMenu from '../GeneralDiagrams/SmallMenu'\r\nimport ARArrayDrop from \"../ARdiagram/ARArrayDrop\"\r\n\r\n/* Can display nested classes, but cannot handle dropping of classes onto classes right now */\r\nclass Class extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n        this.handleVarChange = this.handleVarChange.bind(this);\r\n        this.handleNestedDrops = this.handleNestedDrops.bind(this);\r\n        this.handleArrayDrop = this.handleArrayDrop.bind(this);\r\n        this.convertTo = this.convertTo.bind(this);\r\n\r\n        this.classRef = React.createRef()\r\n\r\n        this.state = {\r\n            hasArrow:false, \r\n            targetDiv:''\r\n        }\r\n    }\r\n\r\n    getDefaultName(c, length) {\r\n        return String.fromCharCode(c.charCodeAt(0) + length);\r\n    }\r\n\r\n    handleDrop(text, value, classes) {\r\n\r\n        var val = value;\r\n\r\n        var primitives = ['int', 'double', 'boolean', 'float', 'char'];\r\n        var name = this.getDefaultName('a', val.length);\r\n\r\n        console.log('in handle Class drop');\r\n\r\n        if (text === 'stack') {\r\n            alert('stack frames cant be dropped here...')\r\n        }  else if (text === \"array\") {\r\n            var new_var = {\r\n                type: text,\r\n                name: name,\r\n                value: { array: [ [ {\r\n                    elementID: 1,\r\n                    elementValue: \" \"\r\n                }] ]}\r\n            };\r\n\r\n            val.push(new_var);\r\n        }\r\n        else if (!primitives.includes(text)) {\r\n\r\n            var the_class = classes.find(item => item.name === text);\r\n\r\n            var new_class = {\r\n                type: the_class.name,\r\n                name: name,\r\n                value: the_class.variables,\r\n                return: '',\r\n            };\r\n\r\n            val.push(new_class);\r\n\r\n        } else {\r\n\r\n            var new_var = {\r\n                type: text,\r\n                name: name,\r\n                value: '???',\r\n                return: ''\r\n            };\r\n\r\n            val.push(new_var);\r\n        }\r\n        return val;\r\n    }\r\n\r\n    convertTo(newType, target) {\r\n        // ToDo: change the type\r\n        this.setState(state => ({\r\n            hasArrow: true,\r\n            targetDiv: target,\r\n        }));\r\n    }\r\n\r\n    /* handles changing the name of a variable */\r\n    handleNameChange(new_name) {\r\n        const { id, value, ret } = this.props;\r\n        this.props.onChange(id, new_name, value, ret);\r\n    }\r\n\r\n    /* handles changing the value of a variable */\r\n    handleVarChange(var_id, var_name, var_val, var_ret) {\r\n\r\n        var { id, name, value, ret } = this.props;\r\n\r\n        value[var_id].name = var_name;\r\n        value[var_id].value = var_val;\r\n        value[var_id].return = var_ret;\r\n\r\n        this.props.onChange(id, name, value, ret);\r\n    }\r\n\r\n    handleNestedDrops(val, nest_id) {\r\n\r\n        console.log('in handleNestedDrops...');\r\n        console.log(val)\r\n        console.log(nest_id)\r\n        var { id, value } = this.props;\r\n\r\n        value[nest_id].value = val;\r\n\r\n        this.props.handleChange(value, id);\r\n    }\r\n\r\n\r\n    handleArrayDrop(id, name, val){\r\n        var value = this.props.value;\r\n        value[id].name = name;\r\n        value[id].value = val;\r\n\r\n        this.props.handleChange(value, id);\r\n    }\r\n\r\n    render() {\r\n        const { value, type, name, drawInfoOpen, classes, arrowConnectionPointsOpen,id } = this.props;\r\n        const primitives = ['int', 'double', 'boolean', 'float', 'char'];\r\n        const { hasArrow, targetDiv } = this.state\r\n        const DroppableClass = Droppable(Class);\r\n              \r\n\r\n        return (\r\n            <div ref={this.classRef} className='class' id={'object-' + name + id}>\r\n                <div className='class-name'>\r\n                    <ClickMenu \r\n                        id={name+id} \r\n                        arrowConnectionPointsOpen={arrowConnectionPointsOpen} \r\n                        toggleArrowConnectionPoints={this.props.toggleArrowConnectionPoints}\r\n                        convertTo={this.convertTo}\r\n                    />\r\n\r\n                    {`${type} `}\r\n                    &nbsp;\r\n                    <EditableText onChange={this.handleNameChange} value={name} editClassName=\"stackframeName\" />\r\n                    &nbsp;\r\n                    <Toggalable toggle={arrowConnectionPointsOpen} alt={null}>\r\n                        {'object-' + name + id}\r\n                    </Toggalable>        \r\n                </div>\r\n\r\n                <div className='variables'>\r\n                    <ul>\r\n                        {value.map((item, index) => {\r\n                            if (primitives.includes(item.type)) {\r\n                                return (\r\n                                    <li key={index}>\r\n                                        <Variable\r\n                                            id={index}\r\n                                            type={item.type}\r\n                                            name={item.name}\r\n                                            value={item.value}\r\n                                            ret={item.return}\r\n                                            drawInfoOpen={drawInfoOpen}\r\n                                            onChange={this.handleVarChange}\r\n                                            arrowConnectionPointsOpen={arrowConnectionPointsOpen}\r\n                                            toggleArrowConnectionPoints={this.props.toggleArrowConnectionPoints}\r\n                                        />\r\n                                    </li>\r\n                                );\r\n                            } else if (item.type === 'array') {\r\n                                return (\r\n                                    <li key={index}>\r\n                                         <ARArrayDrop \r\n                                            id={index}\r\n                                            type={item.type}\r\n                                            name={item.name}\r\n                                            value={item.value}\r\n                                            onChange={this.handleVarChange}\r\n                                            handleDrop={this.handleArrayDrop}\r\n                                            handleChange={this.handleArrayDrop}\r\n\r\n                                    />\r\n                                    </li>\r\n                                );\r\n                            }else {\r\n                                return (\r\n                                    <li key={index}>\r\n                                        <DroppableClass\r\n                                            id={index}\r\n                                            type={item.type}\r\n                                            name={item.name}\r\n                                            value={item.value}\r\n                                            ret={item.return}\r\n                                            classes={classes}\r\n                                            drawInfoOpen={drawInfoOpen}\r\n                                            onChange={this.handleVarChange}\r\n                                            handleDrop={this.handleNestedDrops}\r\n                                            handleChange={this.handleNestedDrops}\r\n                                        />\r\n                                    </li>\r\n                                );\r\n                            }\r\n                        })}\r\n                    </ul>\r\n                </div>\r\n                {hasArrow ?  <Arrow start={this.classRef} end={targetDiv} path={\"grid\"}/>:<React.Fragment/>}    \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Class;","C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\GeneralDiagrams\\Arrow\\Arrow.jsx",["190","191","192","193"],"import React, {useState, useEffect, useRef} from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport Xarrow from \"react-xarrows\"\r\nimport { useSelector } from 'react-redux'\r\nimport {\r\n    selectReRenderToggle,\r\n} from './arrowSlice'\r\n\r\n/*\r\n// uses xArrow, but renders this element in another root div called arrow-root, this is in public/index.html after root\r\n// uses portals to render it there, this was to make it not get overlapped by other elements (zIndex doesn't solve this easily with react)\r\n// (inflexibility of library xArrow v1)\r\n\r\n// also has event listener to change state of the arrow upon resizing of the window, this is simply to force the arrow to re-rener\r\n// so it shows up in the proper place -> should move this to higher order now that we use redux\r\n\r\n<Xarrow headSize={0} {...props}/>,el -> this is for arrow without arrow head (reference arrow tyep)\r\n*/\r\n\r\nconst arrowRoot = document.getElementById('arrow-root')\r\n\r\nconst Arrow = (props) => { \r\n    const [resizing, setResizing] = React.useState(false) \r\n    const reRenderToggle = useSelector(selectReRenderToggle)\r\n    const el = document.createElement('div')\r\n\r\n    const handleResize = () => {\r\n        setResizing(true)\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('resize', handleResize)\r\n        arrowRoot.appendChild(el)\r\n\r\n        return function cleanup() {\r\n            arrowRoot.removeChild(el)\r\n            window.removeEventListener('resize', handleResize)\r\n            setResizing(false)\r\n        }\r\n    })\r\n\r\n    return ReactDOM.createPortal(\r\n        <Xarrow color='black' {...props}/>,el\r\n    )\r\n\r\n}\r\n\r\nexport default Arrow","C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\GeneralDiagrams\\SmallMenu.jsx",[],"C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\components\\codeDoodle\\stackSlice.js",[],"C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\components\\DroppableFunction.jsx",["194","195","196"],"import React, { Component } from 'react';\r\n\r\n/* \r\n    Higher Order Component that can be used to make another component 'droppable'\r\n    Meaning, something can be dropped onto it and it will handle such action\r\n\r\n    ** Droppable manages no state and expects its parent component to manage state **\r\n\r\n    Running example: You have parent component X and child component Y, you want component Y to be droppable\r\n\r\n    Particular things need to be done to make this work (in any order):\r\n\r\n    1. Wrap the component you want to be droppable (make sure Droppable.js is imported)\r\n        \r\n            - const <NewComponentName> = Droppable(Y); (where <NewComponentName> is whatever you want)\r\n        \r\n        - Then you can render the new droppable Y component as <NewComponentName>\r\n\r\n        - This is essentially creating:\r\n\r\n            <Droppable>\r\n                <Y />\r\n            </Droppable>\r\n\r\n    2. Pass some required information to <NewComponentName>\r\n        \r\n        - This should be done in the form:\r\n\r\n            <NewComponentName\r\n                value={}\r\n                handleDrop={}\r\n            />\r\n        \r\n        - value is whatever info the child component Y should be handling on drop, likely state\r\n        - handleDrop is access to parent component X's handleDrop function\r\n            - it will likely save state in component X or pass state further up\r\n        - any other extra attributes of your own can be passed to child component Y, \r\n          they will be passed through as is and can be accessed in Y as expected\r\n\r\n    3. Create a function called handleDrop() in component Y, this will likely be the logic to handle the drop\r\n        In other words, whatever needs to happen on drop for component Y is implemented here\r\n\r\n        This function needs to do two things:\r\n\r\n        1. it needs to receive two arguments (text, value), you can call text and value whatever you want though\r\n            - text is information about what has been dragged \r\n                (i.e. you drag Int from the drawing icons, text will be 'int', this info is specified and created in DrawingIcons)\r\n            - value is the value attribute passed in step 2., again likely state\r\n        2. it needs to return the outcome of the drop\r\n            Note: since value could likely be state make sure you return all necessary state as it will likely be updated as such\r\n\r\n    And that it! This is lengthy but it really isn't that complicated, if you want to see an \r\n    examples look at files StackFrame.js (would be component X \r\n    in running example) and ARHalfFrame.js (would be component Y in running example), or ARDiagramDrawArea.js and any of ARStack/Heap/StaticArea.js, Heap and Static are not implemented right now and are just the skeleton so that could be a good place to start! \r\n    \r\n     How Droppable works will be explained below as well, so have a look at the rest of this file if needed.\r\n*/\r\n\r\n/* Droppable receives a component as an argument (i.e. Y in running example)... */\r\nfunction Droppable (WrappedComponent) {\r\n    /* ... and will return another component (i.e. <NewComponentName> in step 1.)*/\r\n    return class extends Component {\r\n        constructor(props) {\r\n            super(props);\r\n\r\n            this.dropRef = React.createRef();\r\n            this.handleDrop = this.handleDrop.bind(this);\r\n        }\r\n\r\n        /* \r\n            On mount, it will get the ref to the new component and attach event listeners for:\r\n                - dragover event (which will be handled by function handleDragOver)\r\n                - drop event (which will be handled by function handleDrop)\r\n        */\r\n        componentDidMount() {\r\n            const drop = this.dropRef.current;\r\n            drop.addEventListener('dragover', this.handleDragOver);\r\n            drop.addEventListener('drop', this.handleDrop);\r\n        }\r\n\r\n        /* Prevents unwanted functionality when dragging item over valid drop targets */\r\n        handleDragOver(e) {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n        }\r\n\r\n        /* Prevents unwanted functionality on drop, and... */\r\n        handleDrop(e) {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n\r\n            /* ... gets information about whats being dragged (info set in DrawingIcons)*/\r\n            var text = e.dataTransfer.getData('Text');\r\n\r\n            /* information that is to be handled by Y's unique handleDrop function */\r\n            var { value, classes, id } = this.props;\r\n\r\n            /* \r\n                This is why step 3. is important!\r\n                This calls Y's handleDrop function and gets the new state from it\r\n            */\r\n            console.log(\"Droppable Function\")\r\n            console.log(text);\r\n            this.props.handleDrop(this.props, text);\r\n\r\n            // value = WrappedComponent.prototype.handleDrop(text, value, classes);\r\n            // console.log('returned....');\r\n            // /* Passes the new state up to component X to be handled  */\r\n            // this.props.handleDrop(value, id);\r\n        }\r\n\r\n        /* \r\n            You can see here that the ref is wrapped around what would be component Y \r\n            {...this.props} is just passing all attributes you gave <NewComponentName> as props to component Y, as stated earlier these can be accessed as you would expect in component Y (again you must pass things specified in step 2., but you can pass as many extra things as you would like)\r\n    \r\n            Class 'droppable' can be found in CodeDoodle.css if changes need to be made,\r\n            as of now it tries to fit the width and height of its container, and has a min-height\r\n            of 100px just in case it can't do this.\r\n        */\r\n        render() {\r\n            return (\r\n                <div className='droppable' ref={this.dropRef} >\r\n                    {console.log(\"DroppableFunction R\")}\r\n                    {console.log(this.props)}\r\n                    <WrappedComponent {...this.props} />\r\n                </div >\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default Droppable;","C:\\Users\\Talha\\Desktop\\CodeDoodle\\src\\ARdiagram\\shapes\\StackFrameFunction.js",["197","198","199","200","201"],{"ruleId":"202","replacedBy":"203"},{"ruleId":"204","replacedBy":"205"},{"ruleId":"206","severity":1,"message":"207","line":39,"column":11,"nodeType":"208","messageId":"209","endLine":39,"endColumn":13},{"ruleId":"206","severity":1,"message":"210","line":25,"column":11,"nodeType":"208","messageId":"209","endLine":25,"endColumn":21},{"ruleId":"206","severity":1,"message":"211","line":5,"column":8,"nodeType":"208","messageId":"209","endLine":5,"endColumn":16},{"ruleId":"206","severity":1,"message":"212","line":1,"column":17,"nodeType":"208","messageId":"209","endLine":1,"endColumn":26},{"ruleId":"206","severity":1,"message":"213","line":7,"column":11,"nodeType":"208","messageId":"209","endLine":7,"endColumn":21},{"ruleId":"206","severity":1,"message":"210","line":36,"column":11,"nodeType":"208","messageId":"209","endLine":36,"endColumn":21},{"ruleId":"206","severity":1,"message":"212","line":1,"column":17,"nodeType":"208","messageId":"209","endLine":1,"endColumn":26},{"ruleId":"206","severity":1,"message":"214","line":10,"column":10,"nodeType":"208","messageId":"209","endLine":10,"endColumn":30},{"ruleId":"206","severity":1,"message":"215","line":66,"column":12,"nodeType":"208","messageId":"209","endLine":66,"endColumn":17},{"ruleId":"206","severity":1,"message":"216","line":66,"column":19,"nodeType":"208","messageId":"209","endLine":66,"endColumn":27},{"ruleId":"206","severity":1,"message":"217","line":67,"column":18,"nodeType":"208","messageId":"209","endLine":67,"endColumn":25},{"ruleId":"206","severity":1,"message":"218","line":70,"column":21,"nodeType":"208","messageId":"209","endLine":70,"endColumn":31},{"ruleId":"206","severity":1,"message":"219","line":71,"column":12,"nodeType":"208","messageId":"209","endLine":71,"endColumn":18},{"ruleId":"206","severity":1,"message":"220","line":194,"column":11,"nodeType":"208","messageId":"209","endLine":194,"endColumn":23},{"ruleId":"206","severity":1,"message":"221","line":1,"column":16,"nodeType":"208","messageId":"209","endLine":1,"endColumn":24},{"ruleId":"206","severity":1,"message":"222","line":11,"column":8,"nodeType":"208","messageId":"209","endLine":11,"endColumn":17},{"ruleId":"223","severity":1,"message":"224","line":118,"column":22,"nodeType":"225","messageId":"226","endLine":118,"endColumn":24},{"ruleId":"206","severity":1,"message":"212","line":1,"column":17,"nodeType":"208","messageId":"209","endLine":1,"endColumn":26},{"ruleId":"206","severity":1,"message":"210","line":20,"column":11,"nodeType":"208","messageId":"209","endLine":20,"endColumn":21},{"ruleId":"206","severity":1,"message":"212","line":1,"column":17,"nodeType":"208","messageId":"209","endLine":1,"endColumn":26},{"ruleId":"206","severity":1,"message":"227","line":5,"column":8,"nodeType":"208","messageId":"209","endLine":5,"endColumn":15},{"ruleId":"206","severity":1,"message":"228","line":16,"column":11,"nodeType":"208","messageId":"209","endLine":16,"endColumn":18},{"ruleId":"229","severity":1,"message":"230","line":43,"column":38,"nodeType":"231","messageId":"232","endLine":43,"endColumn":40},{"ruleId":"229","severity":1,"message":"230","line":73,"column":13,"nodeType":"231","messageId":"232","endLine":73,"endColumn":15},{"ruleId":"233","severity":1,"message":"234","line":73,"column":17,"nodeType":"208","messageId":"235","endLine":73,"endColumn":24},{"ruleId":"206","severity":1,"message":"221","line":1,"column":16,"nodeType":"208","messageId":"209","endLine":1,"endColumn":24},{"ruleId":"206","severity":1,"message":"236","line":1,"column":37,"nodeType":"208","messageId":"209","endLine":1,"endColumn":43},{"ruleId":"206","severity":1,"message":"237","line":23,"column":12,"nodeType":"208","messageId":"209","endLine":23,"endColumn":20},{"ruleId":"206","severity":1,"message":"238","line":24,"column":11,"nodeType":"208","messageId":"209","endLine":24,"endColumn":25},{"ruleId":"206","severity":1,"message":"239","line":96,"column":19,"nodeType":"208","messageId":"209","endLine":96,"endColumn":24},{"ruleId":"206","severity":1,"message":"240","line":96,"column":26,"nodeType":"208","messageId":"209","endLine":96,"endColumn":33},{"ruleId":"206","severity":1,"message":"207","line":96,"column":35,"nodeType":"208","messageId":"209","endLine":96,"endColumn":37},{"ruleId":"206","severity":1,"message":"212","line":1,"column":17,"nodeType":"208","messageId":"209","endLine":1,"endColumn":26},{"ruleId":"206","severity":1,"message":"241","line":7,"column":24,"nodeType":"208","messageId":"209","endLine":7,"endColumn":35},{"ruleId":"206","severity":1,"message":"242","line":8,"column":9,"nodeType":"208","messageId":"209","endLine":8,"endColumn":25},{"ruleId":"206","severity":1,"message":"243","line":27,"column":9,"nodeType":"208","messageId":"209","endLine":27,"endColumn":17},{"ruleId":"206","severity":1,"message":"207","line":32,"column":11,"nodeType":"208","messageId":"209","endLine":32,"endColumn":13},"no-native-reassign",["244"],"no-negated-in-lhs",["245"],"no-unused-vars","'id' is assigned a value but never used.","Identifier","unusedVar","'handleDrop' is assigned a value but never used.","'Variable' is defined but never used.","'Component' is defined but never used.","'addElement' is assigned a value but never used.","'selectReRenderToggle' is defined but never used.","'stack' is assigned a value but never used.","'setStack' is assigned a value but never used.","'setHeap' is assigned a value but never used.","'setAnchors' is assigned a value but never used.","'arrows' is assigned a value but never used.","'handleArrows' is assigned a value but never used.","'useState' is defined but never used.","'Draggable' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'Pointer' is defined but never used.","'anchors' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","no-redeclare","'new_var' is already defined.","redeclared","'useRef' is defined but never used.","'resizing' is assigned a value but never used.","'reRenderToggle' is assigned a value but never used.","'value' is assigned a value but never used.","'classes' is assigned a value but never used.","'useSelector' is defined but never used.","'addToSingleStack' is defined but never used.","'dispatch' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]