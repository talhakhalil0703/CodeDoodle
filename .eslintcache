[{"C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\index.js":"1","C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\reportWebVitals.js":"2","C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\App.js":"3","C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\components\\CodeDoodle.js":"4","C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\components\\DownloadButton.js":"5","C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\components\\UploadButton.js":"6","C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\components\\CodePanel.js":"7","C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\components\\Toggalable.js":"8","C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\ARdiagram\\ARDiagramDrawArea.js":"9","C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\components\\CodeEditor.js":"10","C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\ARdiagram\\ARHeapArea.js":"11","C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\ARdiagram\\ARStaticArea.js":"12","C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\ARdiagram\\ARStackArea.js":"13","C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\components\\Droppable.js":"14","C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\components\\DrawingIcons.js":"15","C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\components\\LineNum.js":"16","C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\components\\DragAndDropFiles.js":"17","C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\components\\Pointer.js":"18","C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\components\\ClassPopupArea.js":"19","C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\ARdiagram\\shapes\\StackFrame.js":"20","C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\components\\PointerPopupArea.js":"21","C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\GeneralDiagrams\\EditableText.js":"22","C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\ARdiagram\\shapes\\ObjectFrame.js":"23","C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\ARdiagram\\shapes\\shapeComponents\\ARHalfFrame.js":"24","C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\components\\Variable.js":"25","C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\components\\Class.js":"26","C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\components\\Anchor.js":"27","C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\GeneralDiagrams\\SmallMenu.js":"28","C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\GeneralDiagrams\\Arrow.js":"29"},{"size":517,"mtime":1612499469329,"results":"30","hashOfConfig":"31"},{"size":362,"mtime":1610932656978,"results":"32","hashOfConfig":"31"},{"size":145,"mtime":1610932656893,"results":"33","hashOfConfig":"31"},{"size":12091,"mtime":1612834412564,"results":"34","hashOfConfig":"31"},{"size":1207,"mtime":1612499477164,"results":"35","hashOfConfig":"31"},{"size":1528,"mtime":1612499477169,"results":"36","hashOfConfig":"31"},{"size":5498,"mtime":1612499477163,"results":"37","hashOfConfig":"31"},{"size":670,"mtime":1611268931394,"results":"38","hashOfConfig":"31"},{"size":14106,"mtime":1612713280414,"results":"39","hashOfConfig":"31"},{"size":4410,"mtime":1612499477161,"results":"40","hashOfConfig":"31"},{"size":392,"mtime":1611269593357,"results":"41","hashOfConfig":"31"},{"size":398,"mtime":1612603007387,"results":"42","hashOfConfig":"31"},{"size":4208,"mtime":1612596324249,"results":"43","hashOfConfig":"31"},{"size":5858,"mtime":1612499477167,"results":"44","hashOfConfig":"31"},{"size":2433,"mtime":1612708960526,"results":"45","hashOfConfig":"31"},{"size":1260,"mtime":1612499477168,"results":"46","hashOfConfig":"31"},{"size":1548,"mtime":1612499477164,"results":"47","hashOfConfig":"31"},{"size":1691,"mtime":1611011864816,"results":"48","hashOfConfig":"31"},{"size":3905,"mtime":1612499477158,"results":"49","hashOfConfig":"31"},{"size":3162,"mtime":1612596318769,"results":"50","hashOfConfig":"31"},{"size":893,"mtime":1611012174577,"results":"51","hashOfConfig":"31"},{"size":2287,"mtime":1610936316846,"results":"52","hashOfConfig":"31"},{"size":1738,"mtime":1612499477153,"results":"53","hashOfConfig":"31"},{"size":4797,"mtime":1612603076085,"results":"54","hashOfConfig":"31"},{"size":3803,"mtime":1612706222515,"results":"55","hashOfConfig":"31"},{"size":6579,"mtime":1612742480683,"results":"56","hashOfConfig":"31"},{"size":1476,"mtime":1612813600256,"results":"57","hashOfConfig":"31"},{"size":1999,"mtime":1612598327877,"results":"58","hashOfConfig":"31"},{"size":1561,"mtime":1612826647222,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"1nb9vam",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"62"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"62"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"62"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"62"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"62"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"62"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"62"},"C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\index.js",[],["127","128"],"C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\reportWebVitals.js",[],"C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\App.js",[],"C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\components\\CodeDoodle.js",["129","130","131"],"C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\components\\DownloadButton.js",[],"C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\components\\UploadButton.js",[],"C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\components\\CodePanel.js",[],"C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\components\\Toggalable.js",[],"C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\ARdiagram\\ARDiagramDrawArea.js",["132","133"],"import React, { Component } from 'react';\r\nimport './ARDiagramDrawArea.css';\r\n\r\nimport ARHeapArea from './ARHeapArea';\r\nimport ARStackArea from './ARStackArea';\r\nimport ARStaticArea from './ARStaticArea';\r\n\r\nimport DrawingIcons from '../components/DrawingIcons';\r\nimport Droppable from '../components/Droppable';\r\nimport Toggalable from '../components/Toggalable'\r\nimport Draggable from 'react-draggable'\r\n\r\n/* \r\n    ARDiagramDrawArea has the:\r\n     - drawing icons (i.e. int, double etc.)\r\n     - stack section\r\n     - heap section\r\n     - static section (stat)\r\n\r\n    Receives props:\r\n     - stack: all info in the stack section\r\n     - heap: all info in the heap section\r\n     - stat: all info in the static section\r\n     - onStackChange: access to CodeDoodles onStackChange function\r\n     - onHeapChange: access to CodeDoodles onHeapChange function (not yet implemented)\r\n     - onStatChange: access to CodeDoodles onStatChange function (not yet implemented)\r\n*/\r\n\r\nconst DroppableStack = Droppable(ARStackArea);\r\nconst DroppableHeap = Droppable(ARHeapArea);\r\nconst DroppableStatic = Droppable(ARStaticArea);\r\n\r\nclass ARDiagramDrawArea extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleStackChange = this.handleStackChange.bind(this);\r\n    this.handleHeapChange = this.handleHeapChange.bind(this);\r\n    this.handleStaticChange = this.handleStaticChange.bind(this);\r\n    this.generateCode = this.generateCode.bind(this);\r\n    this.displayExtraInfo = this.displayExtraInfo.bind(this);\r\n  }\r\n\r\n  /* sends all stack info to parent to be updated */\r\n  handleStackChange(frames) {\r\n    this.props.onStackChange(frames);\r\n  }\r\n\r\n  handleHeapChange(heap) {\r\n    console.log(heap);\r\n  }\r\n\r\n  handleStaticChange(stat) {\r\n    this.props.onStaticChange(stat)\r\n  }\r\n\r\n  /* Helper function to reverse an array without destroying the original (array from arg) */\r\n  reverseArray(array) {\r\n    var temp = Array.from(array);\r\n    temp.reverse();\r\n    return temp;\r\n  }\r\n\r\n  /* handles dropping Anchors onto the draw area */\r\n  handleDrop(text, value) {\r\n    if(text !== 'anchor'){\r\n      alert('(in arDraw) only anchors can be dropped here...')\r\n    }\r\n  }\r\n\r\n  getStackArgs(stackframe) {\r\n\r\n    var args = '';\r\n\r\n    /* get args of this stackframe and format for display */\r\n    stackframe.args.forEach((arg, index) => {\r\n      if (index === 0) {\r\n        args += `${arg.name}`;\r\n      } else {\r\n        args += `, ${arg.name}`;\r\n      }\r\n    });\r\n\r\n    return args;\r\n  }\r\n\r\n  handleVariableType(value, type, name) {\r\n\r\n    var local = '';\r\n\r\n    /* If the variable has no value set... */\r\n    if (value === '???') {\r\n      local = `\\t${type} ${name};\\n`;\r\n    } else {\r\n      /* If the variable HAS a value set */\r\n      if (type === 'boolean') {\r\n        if (value === '1') {\r\n          local = `\\t${type} ${name} = true;\\n`;\r\n        } else {\r\n          local = `\\t${type} ${name} = false;\\n`;\r\n        }\r\n      } else if (type === 'char') {\r\n        local = `\\t${type} ${name} = '${value}';\\n`;\r\n      } else {\r\n        local = `\\t${type} ${name} = ${value};\\n`;\r\n      }\r\n    }\r\n    return local;\r\n  }\r\n\r\n  getClassVars(items) {\r\n\r\n    var class_vars = '';\r\n    var first = true;\r\n\r\n    items.forEach((item) => {\r\n      if (item.value != '???') {\r\n        if (first) {\r\n          class_vars += `${item.value}`;\r\n          first = false;\r\n        } else {\r\n          class_vars += `, ${item.value}`;\r\n        }\r\n      }\r\n    });\r\n\r\n    return class_vars;\r\n  }\r\n\r\n  getDefaultName(c, length) {\r\n    return String.fromCharCode(c.charCodeAt(0) + length);\r\n  }\r\n\r\n  getClassCode(type, value) {\r\n\r\n    var code = '';\r\n    var variable_types = '';\r\n    var variables = '';\r\n    var vars = [];\r\n    var def_vars = [];\r\n\r\n    code += `class ${type} {\\n`;\r\n\r\n    value.forEach((item, index) => {\r\n      code += `\\t\\t${item.type} ${item.name};\\n`;\r\n\r\n      var char = this.getDefaultName('a', index);\r\n\r\n      if (index === 0) {\r\n\r\n        variable_types += `${item.type}`;\r\n        variables += `${item.type} ${char}`;\r\n        vars.push(item.name);\r\n        def_vars.push(char);\r\n\r\n      } else {\r\n\r\n        variable_types += `, ${item.type}`;\r\n        variables += `, ${item.type} ${char}`;\r\n        vars.push(item.name);\r\n        def_vars.push(char);\r\n\r\n      }\r\n\r\n    });\r\n\r\n    code += `\\tpublic:\\n\\t\\t${type} ();\\n\\t\\t${type} (${variable_types});\\n};\\n\\n`;\r\n\r\n    code += `${type}::${type} () {\\n`;\r\n\r\n    vars.forEach(v => {\r\n      code += `\\t${v};\\n`;\r\n    });\r\n\r\n    code += `}\\n\\n${type}::${type} (${variables}) {\\n`\r\n\r\n    def_vars.forEach((v, index) => {\r\n      if (vars[index] === v) {\r\n        code += `\\tthis.${vars[index]} = ${v};\\n`;\r\n      } else {\r\n        code += `\\t${vars[index]} = ${v};\\n`;\r\n      }\r\n    });\r\n\r\n    code += `}\\n\\n`;\r\n\r\n    return code;\r\n  }\r\n\r\n  getStack(stack) {\r\n\r\n    var code = '';\r\n\r\n    /* \r\n        To handle variables calling functions that take arguments args_list will keep \r\n        track of arguments that all functions take, so if you have:\r\n    \r\n            - void foo(a, b) {},\r\n            - int bar(c, d),\r\n   \r\n        args_list will have:\r\n    \r\n            - args_list['foo'] =  'a, b'\r\n            - args_list['bar'] = 'c, d'\r\n    */\r\n    var args_list = [];\r\n\r\n    /* Iterate through each stack frame */\r\n    stack.forEach((stackframe, index) => {\r\n\r\n      var local = '';\r\n      var classes = '';\r\n      var ret = '';\r\n      var args = this.getStackArgs(stackframe);\r\n\r\n      /* add arguments to args_list to display by appropriate variable */\r\n      args_list[stackframe.name] = args;\r\n\r\n      var temp = stackframe.name.split(' ');\r\n\r\n      var type = temp[0];\r\n      var name = temp[1];\r\n\r\n      const primitives = ['int', 'double', 'boolean', 'float', 'char'];\r\n\r\n      /* Iterate through each local variable */\r\n      stackframe.local.forEach(loc => {\r\n\r\n        if (!primitives.includes(loc.type)) {\r\n\r\n          var class_vars = this.getClassVars(loc.value);\r\n          classes += this.getClassCode(loc.type, loc.value);\r\n\r\n          if (class_vars !== '') {\r\n            local += `\\t${loc.type} ${loc.name} (${class_vars});\\n`;\r\n          } else {\r\n            local += `\\t${loc.type} ${loc.name};\\n`;\r\n          }\r\n        } else {\r\n\r\n          /* If loc.return has been set... */\r\n          if (loc.return !== '') {\r\n\r\n            /* If loc.return is set to return, this is variable being returned in this function */\r\n            if (loc.return === 'return') {\r\n              ret = `\\treturn ${loc.name};\\n`;\r\n            } else {\r\n              /* If its set to anything else, it is getting its value from a function call */\r\n\r\n              /* Get args for this function call */\r\n              var vars = args_list[loc.return];\r\n              local += `\\t${loc.type} ${loc.name} = ${loc.return}(${vars});\\n`;\r\n            }\r\n          } else {\r\n            /* If loc.return has NOT been set... */\r\n            local += this.handleVariableType(loc.value, loc.type, loc.name);\r\n          }\r\n        }\r\n      });\r\n\r\n      /* If the return statement hasnt been set, set it to return 0 */\r\n      if (ret === '') {\r\n        ret = `\\treturn 0;\\n`;\r\n      }\r\n\r\n      code += classes;\r\n\r\n      /* format function header */\r\n      var func = `${type} ${name}(${args}) {\\n`;\r\n      code += func;\r\n\r\n\r\n      code += local;\r\n\r\n      /* If the return type isnt void append return statemtn... */\r\n      if (type !== 'void') {\r\n        code += ret;\r\n      }\r\n\r\n      if (index !== (stack.length - 1)) {\r\n        code += `}\\n\\n`;\r\n      } else {\r\n        code += `}`;\r\n      }\r\n    });\r\n\r\n    return code;\r\n  }\r\n\r\n  getHeap(heap) {\r\n\r\n    var code = '';\r\n    console.log('doing something with heap...');\r\n    return code;\r\n  }\r\n\r\n  getStatic(stat) {\r\n\r\n    var code = '';\r\n    console.log('doing something with static...');\r\n    return code;\r\n  }\r\n\r\n  /*  \r\n      Generates the code that represents the drawn diagram\r\n   \r\n      Current concerns: \r\n          - AR diagrams are 'dumb', as they were taught they can't entirely represent the \r\n              code they may have originally come from on their own\r\n          \r\n          - To make AR to Code meaningful (with what sorts of things I think would make it \r\n              meaningful to follow) will have to break away a bit from how we were taught to \r\n              make AR diagrams, which is my overall concern\r\n   \r\n          - Number of things that can't be reconstructed from an AR diagram without breaking \r\n              from how we were taught to make AR diagrams.\r\n   \r\n          - Some examples of things I think would make AR to Code more meaningful that AR \r\n              diagrams can't illustrate on their own, without these it would, I think, be \r\n              just one big main function. Right now as I'm seeing it these are all totally\r\n              solvable if we break from how we were taught to draw AR diagrams.\r\n   \r\n              On their own, how can AR diagrams: \r\n              - Know if you are in a loop?\r\n              - Know if a variable is calling a function. I think this is probably the biggest\r\n                   concern. Without this the AR to Code conversion would essentially be limited \r\n                   to just one large function. This is because, while AR diagrams indicate \r\n                   that a function call happens, they do not really have any hard indication of \r\n                   what is calling that function, you could infer based on argument values \r\n                   matching another functions local variables, but I personally think this is  \r\n                   not exactly one of the best possible solutions.\r\n                   \r\n                   Further function related problems:\r\n                      - What variable it returns?\r\n                      - What type is the return variable?\r\n                      - What arguments were actually passed to it from caller?\r\n   \r\n                      i.e. you have:\r\n   \r\n                          int foo(e, f) {\r\n                              ...\r\n                          }\r\n   \r\n                          int main() {\r\n                              int a = 0;\r\n                              int b = 0;\r\n                              int c = foo(a, b);\r\n                          }\r\n   \r\n                  - How about if just numbers were passed to the function?\r\n                          \r\n                      i.e. you have:\r\n   \r\n                          int foo(e, f) {\r\n                              ...\r\n                          }\r\n   \r\n                          int main() {\r\n                              int c = foo(10, 20);\r\n                          }\r\n  */\r\n  generateCode() {\r\n    const { stack, heap, stat } = this.props;\r\n\r\n    var code = '';\r\n\r\n    /* Need a deep copy of stack to show code in proper order while preserving stack */\r\n    var temp_stack = this.reverseArray(stack);\r\n\r\n    /* gets all stack information */\r\n    code += this.getStack(temp_stack);\r\n\r\n    /* not implemented rn */\r\n    code += this.getHeap(heap);\r\n\r\n    /* not implemented rn */\r\n    code += this.getStatic(stat);\r\n\r\n    this.props.generateCode(code);\r\n  }\r\n\r\n  displayExtraInfo() {\r\n    this.props.toggleDrawInfo();\r\n  }\r\n\r\n  render() {\r\n    const { stack, heap, stat, classes } = this.props;\r\n    const { stackOpen, heapOpen, staticOpen, drawInfoOpen, arrowConnectionPointsOpen, onClassesChange } = this.props;\r\n    return (\r\n      <div id=\"drawArea\" >\r\n\r\n        <div className='diagram-panel-header'>\r\n          <Toggalable toggle={drawInfoOpen} alt={null}>\r\n            <button className='btn' onClick={this.generateCode}>Generate Code</button>\r\n          </Toggalable>\r\n\r\n          <Toggalable toggle={!drawInfoOpen} alt={null}>\r\n            <button className='btn' onClick={this.displayExtraInfo}>Fill in Extra Information</button>\r\n          </Toggalable>\r\n        </div>\r\n\r\n        <div className='drawing-panel'>\r\n          <DrawingIcons\r\n            spawnAnchor={this.props.spawnAnchor}\r\n            classList={classes}\r\n            onClassListChange={onClassesChange}\r\n            showButton={true}\r\n          />\r\n          <div className='drawing-area'>\r\n\r\n            <Toggalable toggle={heapOpen} alt={null}>\r\n              <div className=\"drawSection\" id=\"heapArea\">\r\n                <DroppableHeap\r\n                  heap={heap}\r\n                  classes={classes}\r\n                  handleDrop={this.handleHeapChange}\r\n                  drawInfoOpen={drawInfoOpen}\r\n                  arrowConnectionPointsOpen={arrowConnectionPointsOpen}\r\n                  toggleArrowConnectionPoints={this.props.toggleArrowConnectionPoints}\r\n                />\r\n              </div>\r\n            </Toggalable>\r\n\r\n            <Toggalable toggle={stackOpen} alt={null}>\r\n              <div className=\"drawSection\" id=\"stackArea\">\r\n                <DroppableStack\r\n                  value={stack}\r\n                  classes={classes}\r\n                  handleDrop={this.handleStackChange}\r\n                  handleChange={this.handleStackChange}\r\n                  drawInfoOpen={drawInfoOpen}\r\n                  arrowConnectionPointsOpen={arrowConnectionPointsOpen}\r\n                  toggleArrowConnectionPoints={this.props.toggleArrowConnectionPoints}\r\n                />\r\n              </div>\r\n            </Toggalable>\r\n\r\n            <Toggalable toggle={staticOpen} alt={null}>\r\n              <div className=\"drawSection\" id=\"staticArea\">\r\n                <DroppableStatic\r\n                  stat={stat}\r\n                  handleDrop={this.handleStaticChange}\r\n                  drawInfoOpen={drawInfoOpen}\r\n                  arrowConnectionPointsOpen={arrowConnectionPointsOpen}\r\n                  toggleArrowConnectionPoints={this.props.toggleArrowConnectionPoints}\r\n                />\r\n              </div>\r\n            </Toggalable>\r\n\r\n          </div>\r\n        </div>\r\n        {/* <Draggable defaultPosition={{x:220,y:220}}>\r\n              <span>\r\n                <div >\r\n                    Wordup\r\n                </div>\r\n              </span>\r\n          </Draggable> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ARDiagramDrawArea;","C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\components\\CodeEditor.js",[],"C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\ARdiagram\\ARHeapArea.js",[],"C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\ARdiagram\\ARStaticArea.js",[],"C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\ARdiagram\\ARStackArea.js",[],"C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\components\\Droppable.js",[],"C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\components\\DrawingIcons.js",["134"],"import React, { Component } from 'react';\r\nimport './DrawingIcons.css';\r\nimport ClassPopupArea from \"./ClassPopupArea\"\r\nimport Pointer from \"./Pointer\"\r\n/* \r\n    Component makes up the drawing tools part of the application\r\n    To add more items to the panel add to <ul> in this format:\r\n        \r\n        <li id='your_icon_name' draggable={true} onDragStart={this.handleDrag}>your_icon_name</li>\r\n    \r\n    Receives no props, manages no state\r\n*/\r\nclass DrawingIcons extends Component {\r\n\r\n    /* \r\n        sets 'Text' to be equal to the targets id (i.e. if int is dragged, int will be loaded into 'Text'), will be retrieved in StackFrame.js\r\n    */\r\n    handleDrag = (e) => {\r\n        e.dataTransfer.setData('Text', e.target.id);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='drawing-icons'>\r\n                <ul>\r\n                    <li id='stack' draggable={true} onDragStart={this.handleDrag}>Stack Frame</li>\r\n                    <li id='int' draggable={true} onDragStart={this.handleDrag}>Int</li>\r\n                    <li id='double' draggable={true} onDragStart={this.handleDrag}>Double</li>\r\n                    <li id='boolean' draggable={true} onDragStart={this.handleDrag}>Boolean</li>\r\n                    <li id='char' draggable={true} onDragStart={this.handleDrag}>Char</li>\r\n\r\n                    <li><h4>Classes</h4></li>\r\n                    {this.props.classList.map((item, index) =>\r\n                        <li key={index} id={item.name} draggable={true} onDragStart={this.handleDrag}>{item.name}</li>\r\n                    )}\r\n\r\n                    {this.props.showButton ?\r\n                        <ClassPopupArea\r\n                            classList={this.props.classList}\r\n                            onClassListChange={this.props.onClassListChange}\r\n                            showButton={this.props.showButton}\r\n                        /> : <React.Fragment />}\r\n\r\n                    <li><h4>Convert</h4></li>\r\n                    <li id='pointer' draggable={true} onDragStart={this.handleDrag}>Pointer</li>\r\n                    <li id='reference' draggable={true} onDragStart={this.handleDrag}>Reference</li>\r\n\r\n                    <li><h4>General</h4></li>\r\n                    <li id='anchor' onClick={this.props.spawnAnchor}><button>Anchor</button></li>\r\n                    \r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DrawingIcons;","C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\components\\LineNum.js",[],"C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\components\\DragAndDropFiles.js",[],"C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\components\\Pointer.js",[],"C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\components\\ClassPopupArea.js",[],"C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\ARdiagram\\shapes\\StackFrame.js",[],"C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\components\\PointerPopupArea.js",[],"C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\GeneralDiagrams\\EditableText.js",["135","136"],"import React from 'react'\n\nexport default class EditableText extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            name: props.name,\n            type: props.type || 'text',\n            value: props.value || '',\n            editClassName: props.editClassName,\n            edit: false\n        }\n\n        this.getWidth = this.getWidth.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    edit = () => {\n        this.setState(() => ({\n            edit: this.state.edit !== false\n        }))\n    }\n\n    getWidth() {\n\n        var width = this.state.value.length;\n        width = width * 8;\n        var css = {\n            width: width\n        }\n\n        return css;\n    }\n\n    handleChange(event) {\n        var new_value = event.target.value;\n        this.props.onChange(new_value);\n        this.setState({ value: new_value });\n    }\n\n    render() {\n        return (\n            this.state.edit === true &&\n            <input\n                style={this.getWidth()}\n                maxLength=\"30\"\n                name={this.state.name}\n                type={this.state.type}\n                value={this.state.value}\n                className={this.state.editClassName}\n                autoFocus\n                onFocus={event => {\n                    const value = event.target.value\n                    event.target.value = ''\n                    event.target.value = value\n                    this.setState({ backup: this.state.value })\n                }}\n                onChange={this.handleChange}\n                onBlur={event=>{\n                this.setState({edit:false})\n                }}\n                onKeyDown={event => {\n                    if (event.key === 'Enter') {\n                        this.setState({ edit: false })\n                    }\n                }}\n                onKeyUp={event => {\n                    if (event.key === 'Escape') {\n                        this.setState({ edit: false, value: this.state.backup })\n                    }\n                }}\n            />\n            ||\n            <span onClick={event => {\n                this.setState({ edit: this.state.edit !== true })\n            }}>\n                {this.state.value}\n            </span>\n        )\n    }\n}","C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\ARdiagram\\shapes\\ObjectFrame.js",["137"],"import React from 'react';\r\nimport './ObjectFrame.css'\r\nimport '../../GeneralDiagrams/HandDrawnBoxes.css'\r\nimport EditableText from '../../GeneralDiagrams/EditableText'\r\nimport Variable from '../../components/Variable';\r\nimport ARHalfFrame from './shapeComponents/ARHalfFrame'\r\nimport Droppable from '../../components/Droppable';\r\n\r\nconst DroppableHalfFrame = Droppable(ARHalfFrame)\r\n\r\n/*  \r\n  ObjectFrame component makes up a ObjectFrame on the application, creates a local and argument half-frame\r\n  Manages no state\r\n\r\n  Receives props:\r\n   - id: a unique identifier of this ObjectFrame\r\n   - name: the name of this ObjectFrame\r\n   - local: the local variables of this ObjectFrame\r\n   - args: the arguments of this ObjectFrame\r\n   - onNameChange: access to ARStackAreas onNameChange function\r\n   - onLocalChange: access to ARStackAreas onLocalChange functionv\r\n   - onArgsChange: access to ARStackAreas onArgsChange function\r\n*/\r\nexport default class ObjectFrame extends React.Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <EditableText\r\n          onChange={this.props.onNameChange}\r\n          value={this.props.name}\r\n          editClassName=\"classCreatorName\"\r\n        />\r\n\r\n        <div className=\"objectBox handDrawnBox3\">\r\n          <div className=\"inner3\">\r\n            <div ref={this.halfFrame} className=\"objectInnerDroppableArea\">\r\n              <DroppableHalfFrame\r\n                name=\"\"\r\n                value={this.props.value}\r\n                classes={this.props.classes}\r\n                handleDrop={this.props.handleDrop}\r\n                handleChange={this.props.handleChange}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}","C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\ARdiagram\\shapes\\shapeComponents\\ARHalfFrame.js",[],"C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\components\\Variable.js",[],"C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\components\\Class.js",["138"],"import React from 'react';\r\nimport Variable from './Variable';\r\nimport EditableText from '../GeneralDiagrams/EditableText';\r\nimport './Class.css';\r\nimport Droppable from './Droppable';\r\nimport Toggalable from  './Toggalable'\r\nimport Arrow from \"../GeneralDiagrams/Arrow\"\r\nimport Xarrow from 'react-xarrows'\r\nimport ClickMenu from '../GeneralDiagrams/SmallMenu'\r\n\r\n/* Can display nested classes, but cannot handle dropping of classes onto classes right now */\r\nclass Class extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n        this.handleVarChange = this.handleVarChange.bind(this);\r\n        this.handleNestedDrops = this.handleNestedDrops.bind(this);\r\n        this.convertTo = this.convertTo.bind(this);\r\n\r\n        this.classRef = React.createRef()\r\n\r\n        this.state = {\r\n            hasArrow:false, \r\n            targetDiv:''\r\n        }\r\n    }\r\n\r\n    getDefaultName(c, length) {\r\n        return String.fromCharCode(c.charCodeAt(0) + length);\r\n    }\r\n\r\n    handleDrop(text, value, classes) {\r\n\r\n        var val = value;\r\n\r\n        var primitives = ['int', 'double', 'boolean', 'float', 'char'];\r\n        var name = this.getDefaultName('a', val.length);\r\n\r\n        console.log('in handle Class drop');\r\n\r\n        if (text === 'stack') {\r\n            alert('stack frames cant be dropped here...')\r\n        } else if (!primitives.includes(text)) {\r\n\r\n            var the_class = classes.find(item => item.name === text);\r\n\r\n            var new_class = {\r\n                type: the_class.name,\r\n                name: name,\r\n                value: the_class.variables,\r\n                return: '',\r\n            };\r\n\r\n            val.push(new_class);\r\n\r\n        } else {\r\n\r\n            var new_var = {\r\n                type: text,\r\n                name: name,\r\n                value: '???',\r\n                return: ''\r\n            };\r\n\r\n            val.push(new_var);\r\n        }\r\n        return val;\r\n    }\r\n\r\n    convertTo(newType, target) {\r\n        // ToDo: change the type\r\n        this.setState(state => ({\r\n            hasArrow: true,\r\n            targetDiv: target,\r\n        }));\r\n    }\r\n\r\n    /* handles changing the name of a variable */\r\n    handleNameChange(new_name) {\r\n        const { id, value, ret } = this.props;\r\n        this.props.onChange(id, new_name, value, ret);\r\n    }\r\n\r\n    /* handles changing the value of a variable */\r\n    handleVarChange(var_id, var_name, var_val, var_ret) {\r\n\r\n        var { id, name, value, ret } = this.props;\r\n\r\n        value[var_id].name = var_name;\r\n        value[var_id].value = var_val;\r\n        value[var_id].return = var_ret;\r\n\r\n        this.props.onChange(id, name, value, ret);\r\n    }\r\n\r\n    handleNestedDrops(val, nest_id) {\r\n\r\n        console.log('in handleNestedDrops...');\r\n\r\n        var { id, value } = this.props;\r\n\r\n        value[nest_id].value = val;\r\n\r\n        this.props.handleChange(value, id);\r\n    }\r\n\r\n    render() {\r\n        const { value, type, name, drawInfoOpen, classes, arrowConnectionPointsOpen,id } = this.props;\r\n        const primitives = ['int', 'double', 'boolean', 'float', 'char'];\r\n        const { hasArrow, targetDiv } = this.state\r\n        const DroppableClass = Droppable(Class);\r\n        \r\n\r\n        return (\r\n            <div ref={this.classRef} className='class' id={'object-' + name + id}>\r\n                <div className='class-name'>\r\n                    <ClickMenu \r\n                        id={name+id} \r\n                        arrowConnectionPointsOpen={arrowConnectionPointsOpen} \r\n                        toggleArrowConnectionPoints={this.props.toggleArrowConnectionPoints}\r\n                        convertTo={this.convertTo}\r\n                    />\r\n\r\n                    {`${type} `}\r\n                    &nbsp;\r\n                    <EditableText onChange={this.handleNameChange} value={name} editClassName=\"stackframeName\" />\r\n                    &nbsp;\r\n                    <Toggalable toggle={arrowConnectionPointsOpen} alt={null}>\r\n                        {'object-' + name + id}\r\n                    </Toggalable>        \r\n                </div>\r\n\r\n                <div className='variables'>\r\n                    <ul>\r\n                        {value.map((item, index) => {\r\n                            if (primitives.includes(item.type)) {\r\n                                return (\r\n                                    <li key={index}>\r\n                                        <Variable\r\n                                            id={index}\r\n                                            type={item.type}\r\n                                            name={item.name}\r\n                                            value={item.value}\r\n                                            ret={item.return}\r\n                                            drawInfoOpen={drawInfoOpen}\r\n                                            onChange={this.handleVarChange}\r\n                                            arrowConnectionPointsOpen={arrowConnectionPointsOpen}\r\n                                            toggleArrowConnectionPoints={this.props.toggleArrowConnectionPoints}\r\n                                        />\r\n                                    </li>\r\n                                );\r\n                            } else {\r\n                                return (\r\n                                    <li key={index}>\r\n                                        <DroppableClass\r\n                                            id={index}\r\n                                            type={item.type}\r\n                                            name={item.name}\r\n                                            value={item.value}\r\n                                            ret={item.return}\r\n                                            classes={classes}\r\n                                            drawInfoOpen={drawInfoOpen}\r\n                                            onChange={this.handleVarChange}\r\n                                            handleDrop={this.handleNestedDrops}\r\n                                            handleChange={this.handleNestedDrops}\r\n                                        />\r\n                                    </li>\r\n                                );\r\n                            }\r\n                        })}\r\n                    </ul>\r\n                </div>\r\n                {hasArrow ?  <Arrow start={this.classRef} end={targetDiv} path={\"grid\"}/>:<React.Fragment/>}    \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Class;","C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\components\\Anchor.js",["139"],"import React, {useState, useEffect} from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport Draggable from 'react-draggable';\r\n\r\n/*\r\n// uses xArrow, but renders this element in another root div called arrow-root, this is in public/index.html after root\r\n// uses portals to render it there, this was to make it not get overlapped by other elements (zIndex doesn't solve this easily with react)\r\n// (inflexibility of library xArrow v1)\r\n\r\n// also has event listener to change state of the arrow upon resizing of the window, this is simply to force the arrow to re-rener\r\n// so it shows up in the proper place \r\n*/\r\n\r\nconst arrowRoot = document.getElementById('arrow-root')\r\n\r\nconst Anchor = (props) => {\r\n    // const [resizing, setResizing] = React.useState(false)\r\n\r\n    const el = document.createElement('div')\r\n\r\n    useEffect(() => {\r\n        console.log('in anchor id: ' + props.number)\r\n        // const handleResize = () => {\r\n        //     console.log('resized')\r\n        //     setResizing(true)\r\n        // }\r\n\r\n        // window.addEventListener('resize', handleResize)\r\n\r\n        arrowRoot.appendChild(el)\r\n\r\n        return function cleanup() {\r\n            arrowRoot.removeChild(el)\r\n            // window.removeEventListener('resize', handleResize)\r\n            // setResizing(false)\r\n        }\r\n    })\r\n\r\n    return ReactDOM.createPortal(\r\n        <Draggable {...props}>\r\n            {props.children}\r\n        </Draggable>,el\r\n    )\r\n\r\n}\r\n\r\nexport default Anchor","C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\GeneralDiagrams\\SmallMenu.js",[],["140","141"],"C:\\Users\\nawee\\OneDrive\\Desktop\\CodeDoodle\\src\\GeneralDiagrams\\Arrow.js",["142","143"],"import React, {useState, useEffect} from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport Xarrow from \"react-xarrows\"\r\n\r\n/*\r\n// uses xArrow, but renders this element in another root div called arrow-root, this is in public/index.html after root\r\n// uses portals to render it there, this was to make it not get overlapped by other elements (zIndex doesn't solve this easily with react)\r\n// (inflexibility of library xArrow v1)\r\n\r\n// also has event listener to change state of the arrow upon resizing of the window, this is simply to force the arrow to re-rener\r\n// so it shows up in the proper place \r\n\r\n// need to make it listen for draggingAnchor event, to change state (which triggers re-render) to point to new anchor position\r\n*/\r\n\r\nconst arrowRoot = document.getElementById('arrow-root')\r\n\r\nconst Arrow = (props) => {\r\n    const [resizing, setResizing] = React.useState(false)\r\n\r\n    const el = document.createElement('div')\r\n\r\n    const handleResize = () => {\r\n        setResizing(true)\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('resize', handleResize)\r\n        // window.addEventListener('anchorDragging', handleResize)\r\n\r\n        arrowRoot.appendChild(el)\r\n\r\n        return function cleanup() {\r\n            arrowRoot.removeChild(el)\r\n            window.removeEventListener('resize', handleResize)\r\n            // window.removeEventListener('anchorDragging', handleResize)\r\n            setResizing(false)\r\n        }\r\n    })\r\n\r\n    return ReactDOM.createPortal(\r\n        <Xarrow {...props}/>,el\r\n    )\r\n\r\n}\r\n\r\nexport default Arrow",{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","severity":1,"message":"149","line":9,"column":8,"nodeType":"150","messageId":"151","endLine":9,"endColumn":17},{"ruleId":"148","severity":1,"message":"152","line":11,"column":8,"nodeType":"150","messageId":"151","endLine":11,"endColumn":14},{"ruleId":"148","severity":1,"message":"153","line":263,"column":45,"nodeType":"150","messageId":"151","endLine":263,"endColumn":51},{"ruleId":"148","severity":1,"message":"149","line":11,"column":8,"nodeType":"150","messageId":"151","endLine":11,"endColumn":17},{"ruleId":"154","severity":1,"message":"155","line":118,"column":22,"nodeType":"156","messageId":"157","endLine":118,"endColumn":24},{"ruleId":"148","severity":1,"message":"158","line":4,"column":8,"nodeType":"150","messageId":"151","endLine":4,"endColumn":15},{"ruleId":"159","severity":1,"message":"160","line":43,"column":38,"nodeType":"161","messageId":"162","endLine":43,"endColumn":40},{"ruleId":"159","severity":1,"message":"160","line":73,"column":13,"nodeType":"161","messageId":"162","endLine":73,"endColumn":15},{"ruleId":"148","severity":1,"message":"163","line":5,"column":8,"nodeType":"150","messageId":"151","endLine":5,"endColumn":16},{"ruleId":"148","severity":1,"message":"152","line":8,"column":8,"nodeType":"150","messageId":"151","endLine":8,"endColumn":14},{"ruleId":"148","severity":1,"message":"164","line":1,"column":16,"nodeType":"150","messageId":"151","endLine":1,"endColumn":24},{"ruleId":"144","replacedBy":"165"},{"ruleId":"146","replacedBy":"166"},{"ruleId":"148","severity":1,"message":"164","line":1,"column":16,"nodeType":"150","messageId":"151","endLine":1,"endColumn":24},{"ruleId":"148","severity":1,"message":"167","line":19,"column":12,"nodeType":"150","messageId":"151","endLine":19,"endColumn":20},"no-native-reassign",["168"],"no-negated-in-lhs",["169"],"no-unused-vars","'Draggable' is defined but never used.","Identifier","unusedVar","'Xarrow' is defined but never used.","'arrows' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'Pointer' is defined but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'Variable' is defined but never used.","'useState' is defined but never used.",["168"],["169"],"'resizing' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]